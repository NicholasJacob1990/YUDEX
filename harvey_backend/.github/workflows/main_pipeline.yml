name: Harvey Backend CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Lint e testes de qualidade de c√≥digo
  lint-and-quality:
    name: üîç Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run Ruff linter
        run: |
          ruff check . --output-format=github
          
      - name: Run Black formatter check
        run: |
          black --check --diff .
          
      - name: Run type checking with mypy
        run: |
          mypy app/
          
      - name: Run security checks with bandit
        run: |
          bandit -r app/ -f json -o bandit-report.json
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  # Job 2: Testes unit√°rios e de integra√ß√£o
  test:
    name: üß™ Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          
      - name: Run unit tests
        run: |
          pytest tests/unit --cov=app --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/1
          QDRANT_URL: http://localhost:6333
          
      - name: Run integration tests
        run: |
          pytest tests/integration --cov=app --cov-append --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/1
          QDRANT_URL: http://localhost:6333
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: htmlcov/

  # Job 3: Testes de seguran√ßa e vulnerabilidades
  security:
    name: üîí Security & Vulnerability Tests
    runs-on: ubuntu-latest
    needs: [lint-and-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

  # Job 4: Build e push da imagem Docker
  build-and-push:
    name: üêã Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production
          
      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          
      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Job 5: Deploy para ambiente de staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Configure kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
          
      - name: Deploy with Helm
        run: |
          helm upgrade --install harvey-staging ./helm/harvey \
            --set image.tag=${{ github.sha }} \
            --set-string secrets.openai_api_key="${{ secrets.OPENAI_API_KEY_STAGING }}" \
            --set-string secrets.anthropic_api_key="${{ secrets.ANTHROPIC_API_KEY_STAGING }}" \
            --set-string secrets.database_url="${{ secrets.DATABASE_URL_STAGING }}" \
            --set-string secrets.redis_url="${{ secrets.REDIS_URL_STAGING }}" \
            --set environment="staging" \
            --namespace staging \
            --create-namespace \
            --wait \
            --timeout=600s
            
      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=harvey-backend -n staging --timeout=300s
          kubectl port-forward svc/harvey-backend 8080:8000 -n staging &
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/metrics || exit 1
          
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # Job 6: Deploy para produ√ß√£o (manual trigger)
  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Configure kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
          
      - name: Deploy with Helm
        run: |
          helm upgrade --install harvey-production ./helm/harvey \
            --set image.tag=${{ github.sha }} \
            --set-string secrets.openai_api_key="${{ secrets.OPENAI_API_KEY_PRODUCTION }}" \
            --set-string secrets.anthropic_api_key="${{ secrets.ANTHROPIC_API_KEY_PRODUCTION }}" \
            --set-string secrets.database_url="${{ secrets.DATABASE_URL_PRODUCTION }}" \
            --set-string secrets.redis_url="${{ secrets.REDIS_URL_PRODUCTION }}" \
            --set environment="production" \
            --set replicaCount=3 \
            --set autoscaling.enabled=true \
            --namespace production \
            --create-namespace \
            --wait \
            --timeout=600s
            
      - name: Run production health checks
        run: |
          kubectl wait --for=condition=ready pod -l app=harvey-backend -n production --timeout=300s
          kubectl get pods -n production
          kubectl get svc -n production
          
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Harvey Backend v${{ github.run_number }}
          body: |
            üöÄ **Harvey Backend Release v${{ github.run_number }}**
            
            **Deployed to Production**: ${{ github.sha }}
            
            **Changes in this release:**
            ${{ github.event.head_commit.message }}
            
            **Docker Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}`
          draft: false
          prerelease: false
          
      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
