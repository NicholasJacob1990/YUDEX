#!/bin/bash

# Script de inicializa√ß√£o para Harvey Backend
# Este script configura o ambiente de desenvolvimento completo

set -e

echo "üöÄ Iniciando configura√ß√£o do Harvey Backend..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para logs
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verifica se o Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        error "Docker n√£o est√° rodando. Inicie o Docker e tente novamente."
        exit 1
    fi
    log "Docker est√° rodando ‚úì"
}

# Verifica se o Docker Compose est√° dispon√≠vel
check_docker_compose() {
    if ! command -v docker-compose > /dev/null 2>&1; then
        error "Docker Compose n√£o est√° instalado."
        exit 1
    fi
    log "Docker Compose est√° dispon√≠vel ‚úì"
}

# Verifica se o Python est√° instalado
check_python() {
    if ! command -v python3 > /dev/null 2>&1; then
        error "Python 3 n√£o est√° instalado."
        exit 1
    fi
    log "Python 3 est√° dispon√≠vel ‚úì"
}

# Cria arquivo .env se n√£o existir
create_env() {
    if [ ! -f .env ]; then
        log "Criando arquivo .env a partir do .env.example..."
        cp .env.example .env
        warn "Arquivo .env criado. Configure as vari√°veis necess√°rias."
    else
        log "Arquivo .env j√° existe ‚úì"
    fi
}

# Instala depend√™ncias Python
install_dependencies() {
    log "Instalando depend√™ncias Python..."
    
    # Verifica se existe venv
    if [ ! -d "venv" ]; then
        log "Criando ambiente virtual..."
        python3 -m venv venv
    fi
    
    # Ativa ambiente virtual
    source venv/bin/activate
    
    # Instala depend√™ncias
    pip install --upgrade pip
    pip install -r requirements.txt
    pip install -r requirements-dev.txt
    
    log "Depend√™ncias Python instaladas ‚úì"
}

# Constr√≥i imagens Docker
build_images() {
    log "Construindo imagens Docker..."
    docker-compose -f docker-compose.dev.yml build
    log "Imagens Docker constru√≠das ‚úì"
}

# Inicia servi√ßos de infraestrutura
start_infrastructure() {
    log "Iniciando servi√ßos de infraestrutura..."
    
    # Para servi√ßos se j√° estiverem rodando
    docker-compose -f docker-compose.dev.yml down
    
    # Inicia servi√ßos
    docker-compose -f docker-compose.dev.yml up -d postgres redis qdrant
    
    log "Aguardando servi√ßos ficarem prontos..."
    sleep 30
    
    # Verifica se servi√ßos est√£o rodando
    if ! docker-compose -f docker-compose.dev.yml ps postgres | grep -q "Up"; then
        error "PostgreSQL n√£o est√° rodando"
        exit 1
    fi
    
    if ! docker-compose -f docker-compose.dev.yml ps redis | grep -q "Up"; then
        error "Redis n√£o est√° rodando"
        exit 1
    fi
    
    if ! docker-compose -f docker-compose.dev.yml ps qdrant | grep -q "Up"; then
        error "Qdrant n√£o est√° rodando"
        exit 1
    fi
    
    log "Servi√ßos de infraestrutura iniciados ‚úì"
}

# Executa migra√ß√µes do banco
run_migrations() {
    log "Executando migra√ß√µes do banco de dados..."
    
    # Ativa ambiente virtual
    source venv/bin/activate
    
    # Executa migra√ß√µes
    alembic upgrade head
    
    log "Migra√ß√µes executadas ‚úì"
}

# Executa testes
run_tests() {
    log "Executando testes..."
    
    # Ativa ambiente virtual
    source venv/bin/activate
    
    # Executa testes unit√°rios
    pytest tests/unit -v
    
    log "Testes executados ‚úì"
}

# Inicia aplica√ß√£o
start_application() {
    log "Iniciando aplica√ß√£o Harvey Backend..."
    
    # Ativa ambiente virtual
    source venv/bin/activate
    
    # Inicia aplica√ß√£o em background
    nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload > app.log 2>&1 &
    
    # Salva PID
    echo $! > app.pid
    
    log "Aplica√ß√£o iniciada em background ‚úì"
    log "PID salvo em app.pid"
    log "Logs em app.log"
}

# Verifica se aplica√ß√£o est√° rodando
check_application() {
    log "Verificando se aplica√ß√£o est√° rodando..."
    
    # Aguarda aplica√ß√£o iniciar
    sleep 10
    
    # Verifica endpoint de health
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        log "Aplica√ß√£o est√° rodando e saud√°vel ‚úì"
    else
        error "Aplica√ß√£o n√£o est√° respondendo"
        exit 1
    fi
}

# Mostra informa√ß√µes finais
show_info() {
    echo ""
    echo "üéâ Harvey Backend configurado com sucesso!"
    echo ""
    echo "üìã Informa√ß√µes importantes:"
    echo "  ‚Ä¢ API: http://localhost:8000"
    echo "  ‚Ä¢ Docs: http://localhost:8000/docs"
    echo "  ‚Ä¢ Health: http://localhost:8000/health"
    echo "  ‚Ä¢ Metrics: http://localhost:8000/metrics"
    echo ""
    echo "üõ†Ô∏è Comandos √∫teis:"
    echo "  ‚Ä¢ make help - Mostra todos os comandos dispon√≠veis"
    echo "  ‚Ä¢ make test - Executa testes"
    echo "  ‚Ä¢ make lint - Verifica qualidade do c√≥digo"
    echo "  ‚Ä¢ make docker-compose-logs - Mostra logs dos servi√ßos"
    echo ""
    echo "üîß Servi√ßos rodando:"
    echo "  ‚Ä¢ PostgreSQL: localhost:5432"
    echo "  ‚Ä¢ Redis: localhost:6379"
    echo "  ‚Ä¢ Qdrant: localhost:6333"
    echo ""
    echo "üìä Monitoramento (opcional):"
    echo "  ‚Ä¢ make monitor-all - Inicia Prometheus e Grafana"
    echo "  ‚Ä¢ Prometheus: http://localhost:9090"
    echo "  ‚Ä¢ Grafana: http://localhost:3000"
    echo ""
}

# Fun√ß√£o de limpeza
cleanup() {
    log "Limpando ambiente..."
    
    # Para aplica√ß√£o se estiver rodando
    if [ -f app.pid ]; then
        kill $(cat app.pid) 2>/dev/null || true
        rm -f app.pid
    fi
    
    # Para servi√ßos Docker
    docker-compose -f docker-compose.dev.yml down
    
    log "Ambiente limpo ‚úì"
}

# Fun√ß√£o principal
main() {
    # Verifica argumentos
    case "${1:-setup}" in
        "setup")
            log "Iniciando configura√ß√£o completa..."
            check_docker
            check_docker_compose
            check_python
            create_env
            install_dependencies
            build_images
            start_infrastructure
            run_migrations
            run_tests
            start_application
            check_application
            show_info
            ;;
        "start")
            log "Iniciando servi√ßos..."
            start_infrastructure
            start_application
            check_application
            log "Servi√ßos iniciados ‚úì"
            ;;
        "stop")
            log "Parando servi√ßos..."
            cleanup
            ;;
        "restart")
            log "Reiniciando servi√ßos..."
            cleanup
            sleep 5
            start_infrastructure
            start_application
            check_application
            log "Servi√ßos reiniciados ‚úì"
            ;;
        "test")
            log "Executando testes..."
            run_tests
            ;;
        "help")
            echo "Uso: $0 {setup|start|stop|restart|test|help}"
            echo ""
            echo "Comandos:"
            echo "  setup   - Configura√ß√£o completa do ambiente"
            echo "  start   - Inicia servi√ßos"
            echo "  stop    - Para servi√ßos"
            echo "  restart - Reinicia servi√ßos"
            echo "  test    - Executa testes"
            echo "  help    - Mostra esta ajuda"
            ;;
        *)
            error "Comando inv√°lido: $1"
            echo "Use: $0 help"
            exit 1
            ;;
    esac
}

# Trap para limpeza em caso de interrup√ß√£o
trap cleanup EXIT

# Executa fun√ß√£o principal
main "$@"
