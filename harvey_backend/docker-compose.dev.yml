version: '3.9'

services:
  # 1. A API principal do Harvey Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: harvey_api
    env_file:
      - .env.example
    environment:
      - DATABASE_URL=postgresql+asyncpg://harvey:harvey_password@postgres:5432/harvey_db
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - ENVIRONMENT=development
    volumes:
      - ./app:/app/app # Hot-reload para desenvolvimento
      - ./tests:/app/tests
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
      - migrate
    command: >
      sh -c "
        echo 'Aguardando serviços...' &&
        sleep 10 &&
        echo 'Iniciando Harvey API...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # 2. Banco de dados PostgreSQL para auditoria, feedback e metadados
  postgres:
    image: postgres:16-alpine
    container_name: harvey_postgres
    environment:
      POSTGRES_USER: harvey
      POSTGRES_PASSWORD: harvey_password
      POSTGRES_DB: harvey_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=pt_BR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U harvey -d harvey_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 3. Cache Redis para Scratchpad, health checks e sessões
  redis:
    image: redis:7-alpine
    container_name: harvey_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 4. Banco de dados vetorial Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: harvey_qdrant
    ports:
      - "6333:6333"
      - "6334:6334" # gRPC port
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 5. Migração de banco de dados
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: harvey_migrate
    environment:
      - DATABASE_URL=postgresql+asyncpg://harvey:harvey_password@postgres:5432/harvey_db
    volumes:
      - ./app/db/migrations:/app/migrations
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Executando migrações...' &&
        python -m alembic upgrade head &&
        echo 'Migrações concluídas!'
      "

  # 6. Prometheus para métricas (opcional, para desenvolvimento)
  prometheus:
    image: prom/prometheus:latest
    container_name: harvey_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # 7. Grafana para visualização (opcional, para desenvolvimento)
  grafana:
    image: grafana/grafana:latest
    container_name: harvey_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=harvey_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # 8. Nginx para proxy reverso (opcional, para testes de produção)
  nginx:
    image: nginx:alpine
    container_name: harvey_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: harvey_network
    driver: bridge
